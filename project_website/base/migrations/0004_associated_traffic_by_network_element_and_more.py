# Generated by Django 4.2.17 on 2025-01-23 18:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('base', '0003_alter_customtablerevhistory_options'),
    ]

    operations = [
        migrations.CreateModel(
            name='Associated_Traffic_By_Network_Element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.CharField(max_length=100, verbose_name='Service Profile')),
                ('exceptions', models.CharField(max_length=100, verbose_name='Exceptions')),
                ('start_aid', models.CharField(max_length=100, verbose_name='Start AID')),
                ('end_aid', models.CharField(max_length=100, verbose_name='END AID')),
                ('svc_id', models.CharField(max_length=100, verbose_name='Service ID')),
                ('svc_desc', models.CharField(max_length=100, verbose_name='Service Description')),
                ('svc_name', models.CharField(max_length=100, verbose_name='Service Name')),
                ('start_ne', models.CharField(max_length=100, verbose_name='Start NE')),
                ('end_ne', models.CharField(max_length=100, verbose_name='End NE')),
                ('parent_ne_id', models.CharField(max_length=100, verbose_name='Parent NE ID')),
            ],
            options={
                'verbose_name': 'Associated_Traffic_By_Network_Element',
                'verbose_name_plural': 'Associated_Traffic_By_Network_Element',
            },
        ),
        migrations.CreateModel(
            name='Fujitsu_Connections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connectionName', models.CharField(max_length=150, verbose_name='Connection Name')),
                ('state', models.CharField(max_length=50, verbose_name='Service State')),
                ('rate', models.CharField(max_length=50, verbose_name='Service Bandwidth Rate')),
                ('layer', models.CharField(max_length=50, verbose_name='Connection Layer')),
                ('direction', models.CharField(max_length=50, verbose_name='Service Direction')),
                ('path_group_info_list', models.CharField(max_length=250, verbose_name='Path Group Information List')),
            ],
            options={
                'verbose_name': 'Fujitsu_Connections',
                'verbose_name_plural': 'Fujitsu_Connections',
                'db_table': 'Fujitsu_Connections',
            },
        ),
        migrations.CreateModel(
            name='Fujitsu_Links',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rateA', models.CharField(max_length=100, verbose_name='Rate A')),
                ('rateZ', models.CharField(max_length=100, verbose_name='Rate Z')),
                ('link_name', models.CharField(max_length=100, verbose_name='Link Name')),
                ('ne_id_A', models.CharField(max_length=100, verbose_name='NE ID A')),
                ('ne_id_Z', models.CharField(max_length=100, verbose_name='NE ID Z')),
                ('link_rate', models.CharField(max_length=100, verbose_name='Link Rate')),
            ],
            options={
                'verbose_name': 'Fujitsu_Links',
                'verbose_name_plural': 'Fujitsu_Links',
            },
        ),
        migrations.CreateModel(
            name='Fujitsu_Pipes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pipe_name', models.CharField(max_length=100, verbose_name='Pipe Name')),
                ('pipe_starting_ne', models.CharField(max_length=100, verbose_name='Pipe Starting NE')),
                ('pipe_starting_aid', models.CharField(max_length=100, verbose_name='Pipe Starting AID')),
                ('pipe_ending_ne', models.CharField(max_length=100, verbose_name='Pipe Ending NE')),
                ('pip_ending_aid', models.CharField(max_length=100, verbose_name='Pipe Ending AID')),
            ],
            options={
                'verbose_name': 'Fujitsu_Pipes',
                'verbose_name_plural': 'Fujitsu_Pipes',
            },
        ),
        migrations.CreateModel(
            name='Pipe_Data',
            fields=[
                ('sv_id', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='SV ID')),
                ('pipe_id', models.CharField(max_length=100, verbose_name='Pipe ID')),
                ('pipe_name', models.CharField(max_length=100, verbose_name='Pipe Name')),
                ('start_ne', models.CharField(max_length=100, verbose_name='Start NE')),
                ('end_ne', models.CharField(max_length=100, verbose_name='End NE')),
                ('connections', models.CharField(max_length=100, verbose_name='Connections')),
                ('profile', models.CharField(max_length=100, verbose_name='Profile')),
            ],
            options={
                'verbose_name': 'Pipe_Data',
                'verbose_name_plural': 'Pipe_Data',
            },
        ),
        migrations.CreateModel(
            name='Processed_TAS_Auth_Sheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_auth_number', models.CharField(max_length=100, verbose_name='Channel Auth Number')),
                ('primary_device_list', models.CharField(max_length=200, verbose_name='Primary Device List')),
                ('secondary_device_list', models.CharField(max_length=200, verbose_name='Secondary Device List')),
                ('inferred_path', models.CharField(max_length=100, verbose_name='Inferred Path for the Service')),
            ],
            options={
                'verbose_name': 'Processed_TAS_Auth_Sheet',
                'verbose_name_plural': 'Processed_TAS_Auth_Sheet',
            },
        ),
        migrations.CreateModel(
            name='Rad_Imported_Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_auth_number', models.CharField(max_length=100, verbose_name='Channel auth number')),
                ('service_name', models.CharField(max_length=100, verbose_name='Channel Auth Name')),
                ('end_point_1_telenium', models.CharField(max_length=100, verbose_name='')),
                ('end_point_2_telenium', models.CharField(max_length=100, verbose_name='')),
                ('start_point', models.CharField(max_length=100, verbose_name='Start device id')),
                ('end_point', models.CharField(max_length=100, verbose_name='End device id ')),
            ],
            options={
                'verbose_name': 'Rad_Imported_Services',
                'verbose_name_plural': 'Rad_Imported_Services',
            },
        ),
        migrations.CreateModel(
            name='RAD_Time_Slots',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_auth_number', models.CharField(max_length=100, verbose_name='Service Auth Number')),
                ('path_name', models.CharField(max_length=100, verbose_name='Path Name')),
                ('source_name', models.CharField(max_length=100, verbose_name='Source Name')),
                ('source_slot', models.CharField(max_length=100, verbose_name='Source Slot')),
                ('source_port', models.CharField(max_length=100, verbose_name='Source Port')),
                ('source_card_type', models.CharField(max_length=100, verbose_name='Source Card Type')),
                ('destination_name', models.CharField(max_length=100, verbose_name='Destination Name')),
                ('destination_slot', models.CharField(max_length=100, verbose_name='Destination Slot')),
                ('destination_port', models.CharField(max_length=100, verbose_name='Destination Port')),
                ('destination_card_type', models.CharField(max_length=100, verbose_name='Destination Card Type')),
                ('network_link', models.CharField(max_length=100, verbose_name='Network Link')),
                ('time_slots', models.CharField(max_length=100, verbose_name='Timeslots')),
            ],
            options={
                'verbose_name': 'RAD_Time_Slots',
                'verbose_name_plural': 'RAD_Time_Slots',
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('sv_id', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='SV ID')),
                ('service_name', models.CharField(max_length=100, verbose_name='Service Name')),
                ('service_profile', models.CharField(max_length=100, verbose_name='Service Profile')),
                ('service_connections', models.CharField(max_length=100, verbose_name='Service Connections')),
                ('start_ne', models.CharField(max_length=100, verbose_name='Start NE')),
                ('end_ne', models.CharField(max_length=100, verbose_name='End NE')),
            ],
            options={
                'verbose_name': 'Services',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Tdm_CrossConnects_Ericsson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_auth_number', models.CharField(max_length=50, verbose_name='Auth Number')),
                ('service_auth_desc', models.CharField(max_length=100, verbose_name='Auth Description')),
                ('interface_1', models.CharField(max_length=50, verbose_name='Interface 1')),
                ('interface_2', models.CharField(max_length=50, verbose_name='Interface 2')),
                ('sv_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services')),
            ],
            options={
                'verbose_name': 'Tdm_CrossConnects_Ericsson',
                'verbose_name_plural': 'Tdm_CrossConnects_Ericsson',
            },
        ),
        migrations.CreateModel(
            name='VLAN_CrossConnects_Ericsson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_auth_number', models.CharField(max_length=50, verbose_name='Service Auth Number')),
                ('service_auth_desc', models.CharField(max_length=100, verbose_name='Auth Description')),
                ('egress_ports', models.CharField(max_length=100, verbose_name='Egress ports')),
                ('sv_id', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services')),
            ],
            options={
                'verbose_name': 'VLAN_CrossConnects_Ericsson',
                'verbose_name_plural': 'VLAN_CrossConnects_Ericsson',
            },
        ),
        migrations.AlterModelOptions(
            name='customtablerevhistory',
            options={'verbose_name': 'customTable Revision History', 'verbose_name_plural': 'customTable Revision Histories'},
        ),
        migrations.AlterField(
            model_name='customtablerevhistory',
            name='table',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.customtable'),
        ),
        migrations.AlterModelTable(
            name='customtable',
            table='customTable',
        ),
        migrations.CreateModel(
            name='VLAN_CrossConnects_EricssonRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.vlan_crossconnects_ericsson')),
            ],
            options={
                'verbose_name': 'VLAN_CrossConnects_Ericsson Revision History',
                'verbose_name_plural': 'VLAN_CrossConnects_Ericsson Revision Histories',
            },
        ),
        migrations.CreateModel(
            name='Tdm_CrossConnects_EricssonRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.tdm_crossconnects_ericsson')),
            ],
            options={
                'verbose_name': 'Tdm_CrossConnects_Ericsson Revision History',
                'verbose_name_plural': 'Tdm_CrossConnects_Ericsson Revision Histories',
            },
        ),
        migrations.CreateModel(
            name='ServicesRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services')),
            ],
            options={
                'verbose_name': 'Services Revision History',
                'verbose_name_plural': 'Services Revision Histories',
            },
        ),
        migrations.CreateModel(
            name='RAD_Time_SlotsRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.rad_time_slots')),
            ],
            options={
                'verbose_name': 'RAD_Time_Slots Revision History',
                'verbose_name_plural': 'RAD_Time_Slots Revision Histories',
            },
        ),
        migrations.AddField(
            model_name='rad_time_slots',
            name='sv_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services'),
        ),
        migrations.CreateModel(
            name='Rad_Imported_ServicesRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.rad_imported_services')),
            ],
            options={
                'verbose_name': 'Rad_Imported_Services Revision History',
                'verbose_name_plural': 'Rad_Imported_Services Revision Histories',
            },
        ),
        migrations.AddField(
            model_name='rad_imported_services',
            name='sv_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services'),
        ),
        migrations.CreateModel(
            name='Processed_TAS_Auth_SheetRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.processed_tas_auth_sheet')),
            ],
            options={
                'verbose_name': 'Processed_TAS_Auth_Sheet Revision History',
                'verbose_name_plural': 'Processed_TAS_Auth_Sheet Revision Histories',
            },
        ),
        migrations.AddField(
            model_name='processed_tas_auth_sheet',
            name='sv_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services'),
        ),
        migrations.CreateModel(
            name='Pipe_DataRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.pipe_data')),
            ],
            options={
                'verbose_name': 'Pipe_Data Revision History',
                'verbose_name_plural': 'Pipe_Data Revision Histories',
            },
        ),
        migrations.CreateModel(
            name='Fujitsu_PipesRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.fujitsu_pipes')),
            ],
            options={
                'verbose_name': 'Fujitsu_Pipes Revision History',
                'verbose_name_plural': 'Fujitsu_Pipes Revision Histories',
            },
        ),
        migrations.CreateModel(
            name='Fujitsu_LinksRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.fujitsu_links')),
            ],
            options={
                'verbose_name': 'Fujitsu_Links Revision History',
                'verbose_name_plural': 'Fujitsu_Links Revision Histories',
            },
        ),
        migrations.CreateModel(
            name='Fujitsu_ConnectionsRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.fujitsu_connections')),
            ],
            options={
                'verbose_name': 'Fujitsu_Connections Revision History',
                'verbose_name_plural': 'Fujitsu_Connections Revision Histories',
            },
        ),
        migrations.AddField(
            model_name='fujitsu_connections',
            name='sv_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services'),
        ),
        migrations.CreateModel(
            name='Associated_Traffic_By_Network_ElementRevHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column_name', models.CharField(max_length=100)),
                ('old_value', models.TextField()),
                ('new_value', models.TextField()),
                ('change_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.associated_traffic_by_network_element')),
            ],
            options={
                'verbose_name': 'Associated_Traffic_By_Network_Element Revision History',
                'verbose_name_plural': 'Associated_Traffic_By_Network_Element Revision Histories',
            },
        ),
        migrations.AddField(
            model_name='associated_traffic_by_network_element',
            name='sv_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='base.services'),
        ),
    ]
